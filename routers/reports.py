from fastapi import APIRouter, Depends, HTTPException, Query, UploadFile, File, Form
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from typing import List, Optional
from pathlib import Path  
import shutil, random

from app.database import get_db
from app import models, schemas

router = APIRouter(prefix="/api", tags=["reports"])

@router.post("/reports", response_model=schemas.ReportOut, status_code=201)
async def create_report(
    description: str = Form(...),
    latitude: float = Form(...),
    longitude: float = Form(...),
    category: str = Form("telegram"),
    source: str = Form("telegram_bot"),
    photo: UploadFile = File(None),
    db: AsyncSession = Depends(get_db),
    telegram_user_id: int = Form(None),  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è user_id
):
    print(f"üîç DEBUG: Starting report creation")  # ‚úÖ –õ–æ–≥
    print(f"üîç DEBUG: Photo object: {photo}")  # ‚úÖ –õ–æ–≥
    print(f"üîç DEBUG: Photo filename: {photo.filename if photo else 'None'}")  # ‚úÖ –õ–æ–≥
    
    try:
        report = models.Report(
            description=description,
            latitude=latitude,
            longitude=longitude,
            category=category,
            source=source,
            has_photo=photo is not None,
            telegram_user_id=telegram_user_id  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id
        )
        
        db.add(report)
        await db.flush()
        print(f"üîç DEBUG: Report ID: {report.id}")  # ‚úÖ –õ–æ–≥
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if photo and photo.filename:
            print(f"üîç DEBUG: Processing photo...")  # ‚úÖ –õ–æ–≥
            
            upload_dir = Path("static/uploads")
            upload_dir.mkdir(parents=True, exist_ok=True)
            print(f"üîç DEBUG: Upload dir: {upload_dir.absolute()}")  # ‚úÖ –õ–æ–≥
            
            file_extension = photo.filename.split('.')[-1] if '.' in photo.filename else 'jpg'
            filename = f"report_{report.id}.{file_extension}"
            file_path = upload_dir / filename
            
            print(f"üîç DEBUG: Saving to: {file_path}")  # ‚úÖ –õ–æ–≥
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(file_path, "wb") as buffer:
                content = await photo.read()
                print(f"üîç DEBUG: Photo size: {len(content)} bytes")  # ‚úÖ –õ–æ–≥
                buffer.write(content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
            if file_path.exists():
                print(f"‚úÖ DEBUG: Photo successfully saved as {filename}")  # ‚úÖ –õ–æ–≥
                print(f"üîç DEBUG: File size: {file_path.stat().st_size} bytes")  # ‚úÖ –õ–æ–≥
            else:
                print(f"‚ùå DEBUG: File was not created!")  # ‚úÖ –õ–æ–≥
        
        else:
            print(f"üîç DEBUG: No photo to save")  # ‚úÖ –õ–æ–≥
        
        await db.commit()
        await db.refresh(report)
        print(f"‚úÖ DEBUG: Report created successfully")  # ‚úÖ –õ–æ–≥
        return report
        
    except Exception as e:
        print(f"‚ùå DEBUG: Error: {e}")  # ‚úÖ –õ–æ–≥
        await db.rollback()
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")

@router.get("/reports", response_model=List[schemas.ReportOut])
async def list_reports(db: AsyncSession = Depends(get_db), id: Optional[int] = Query(None)):
    if id is not None:
        q = await db.execute(select(models.Report).where(models.Report.id == id))
        r = q.scalars().first()
        if not r:
            raise HTTPException(status_code=404, detail="Report not found")
        return [r]
    q = await db.execute(select(models.Report).order_by(models.Report.created_at.desc()).limit(1000))
    results = q.scalars().all()
    return results

@router.get("/reports/geojson")
async def reports_geojson(db: AsyncSession = Depends(get_db)):
    q = await db.execute(select(models.Report))
    reports = q.scalars().all()
    features = []
    for rep in reports:
        feature = {
            "type": "Feature",
            "properties": {
                "id": rep.id,
                "description": rep.description,
                "category": rep.category,
                "source": rep.source,
                "cluster_id": rep.cluster_id,
                "has_photo": rep.has_photo,
                "created_at": rep.created_at.isoformat() if rep.created_at else None,
                "telegram_user_id": rep.telegram_user_id,
                "verified": random.choice(['–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', '–í –æ–∂–∏–¥–∞–Ω–∏–∏', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'])
            },
            "geometry": {
                "type": "Point",
                "coordinates": [rep.longitude, rep.latitude],
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º URL —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if rep.has_photo:
            feature["properties"]["photo_url"] = f"/static/uploads/report_{rep.id}.jpg"
        
        features.append(feature)
    
    return {"type": "FeatureCollection", "features": features}

@router.get("/reports/{report_id}", response_model=schemas.ReportOut)
async def get_report(report_id: int, db: AsyncSession = Depends(get_db)):
    q = await db.execute(select(models.Report).where(models.Report.id == report_id))
    r = q.scalars().first()
    if not r:
        raise HTTPException(status_code=404, detail="Report not found")
    return r
